generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model - represents both guest users and affiliates
model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  phone           String    @unique
  passwordHash    String?   // For future auth needs beyond OTP
  isAffiliate     Boolean   @default(false)
  address         String?   @db.Text
  city            String?
  state           String?
  pincode         String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  orders          Order[]
  otpVerification OtpVerification?
  catalogDownloads CatalogDownload[]
}

// OTP verification for authentication
model OtpVerification {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  parentId    Int?
  name        String
  slug        String    @unique
  description String?   @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Self-relation for hierarchical categories
  parent      Category? @relation("CategoryToSubcategories", fields: [parentId], references: [id], onDelete: SetNull)
  subcategories Category[] @relation("CategoryToSubcategories")
  
  // Relation to products
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  name        String
  slug        String    @unique
  description String?   @db.Text
  brand       String?
  isActive    Boolean   @default(true)
  material    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants    ProductVariant[]
  attributes  ProductAttribute[]

  @@map("products")
}

model ProductVariant {
  id          Int       @id @default(autoincrement())
  productId   Int
  sku         String    @unique
  quantity    Int       @default(0)
  basePrice   Decimal   @db.Decimal(10, 2)
  imageUrls   Json?     // Stored as JSON array for up to 6 images
  isActive    Boolean   @default(true)
  size        String?
  color       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("product_variants")
}

model ProductAttribute {
  id             Int       @id @default(autoincrement())
  productId      Int
  attributeName  String    // fabric_type, occasion, work_type, etc.
  attributeValue String    // cotton, silk, wedding, casual, embroidery, etc.
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

// Orders placed by affiliates
model Order {
  id            Int       @id @default(autoincrement())
  userId        Int
  orderNumber   String    @unique
  totalAmount   Decimal   @db.Decimal(10, 2)
  status        String    @default("pending") // pending, processing, shipped, delivered, cancelled
  shippingAddress String   @db.Text
  paymentMethod String
  paymentStatus String    @default("pending")
  notes         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}
// Including referenced OrderItem model for completeness
model OrderItem {
  id                Int       @id @default(autoincrement())
  orderId           Int
  productVariantId  Int
  unitPrice         Decimal   @db.Decimal(10, 2)
  totalPrice        Decimal   @db.Decimal(10, 2)
  quantity          Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  productVariant    ProductVariant @relation(fields: [productVariantId], references: [id])
  order             Order          @relation(fields: [orderId], references: [id])
  
  @@map("order_items")
}
// Track catalog downloads by affiliates
model CatalogDownload {
  id          Int       @id @default(autoincrement())
  userId      Int
  catalogType String    // Type of catalog downloaded (could be category-specific)
  downloadedAt DateTime @default(now())
  ipAddress   String?
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
}